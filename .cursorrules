# 小智AI聊天机器人开发规范

## 项目概述
小智AI聊天机器人是一个基于ESP32的开源项目，旨在帮助开发者入门AI硬件开发，将大语言模型应用到实际硬件设备中。

## 开发环境要求
- ESP-IDF 5.3+
- Cursor/VSCode + ESP-IDF插件
- Python 3.8+
- Git

## 代码规范
### 1. 文件组织
- 所有源代码文件放在 `main/` 目录下
- 配置文件放在项目根目录
- 文档放在 `docs/` 目录下
- 硬件相关代码放在 `main/boards/` 目录下
- 物联网控制代码放在 `main/iot/` 目录下

### 2. 命名规范
- 文件名：使用小写字母，下划线分隔（例：`voice_recognition.c`）
- 函数名：使用小写字母，下划线分隔（例：`init_voice_recognition()`）
- 变量名：使用小写字母，下划线分隔（例：`voice_buffer`）
- 常量名：使用大写字母，下划线分隔（例：`MAX_BUFFER_SIZE`）
- 结构体名：使用小写字母，下划线分隔（例：`voice_config_t`）

### 3. 代码风格
- 使用Google C++代码风格
- 缩进使用4个空格
- 每行代码不超过100个字符
- 函数之间空一行
- 相关代码块之间空一行
- 使用有意义的变量名和函数名
- 添加必要的注释说明

### 4. 注释规范
- 文件头部添加文件说明
- 函数头部添加函数说明
- 复杂逻辑添加行内注释
- 使用英文注释，保持专业性和准确性

### 5. 错误处理
- 所有函数返回值必须检查
- 使用ESP-IDF的错误处理机制
- 添加适当的日志记录
- 实现优雅的错误恢复机制

### 6. 内存管理
- 避免内存泄漏
- 使用ESP-IDF的内存管理API
- 合理使用堆和栈内存
- 注意内存对齐要求

### 7. 硬件接口
- 遵循ESP32的GPIO使用规范
- 正确配置I2C、SPI等接口
- 注意电源管理
- 实现低功耗模式

### 8. 网络通信
- 使用WebSocket或UDP协议
- 实现断线重连机制
- 添加心跳检测
- 实现数据加密传输

### 9. 语音处理
- 支持多语言识别
- 实现声纹识别
- 优化语音唤醒
- 实现流式语音对话

### 10. AI模型集成
- 支持多种大语言模型
- 实现流式对话
- 优化响应时间
- 实现上下文管理

### 11. 测试规范
- 编写单元测试
- 进行集成测试
- 进行性能测试
- 进行稳定性测试

### 12. 文档要求
- 更新README.md
- 编写API文档
- 添加使用说明
- 提供示例代码

### 13. 版本控制
- 使用语义化版本号
- 编写清晰的提交信息
- 创建功能分支
- 进行代码审查

### 14. 发布流程
- 更新版本号
- 更新文档
- 创建发布标签
- 生成发布说明

## 安全规范
1. 不硬编码敏感信息
2. 实现安全的数据传输
3. 添加访问控制
4. 实现数据加密

## 性能优化
1. 优化内存使用
2. 减少CPU占用
3. 优化网络传输
4. 实现缓存机制

## 维护规范
1. 定期更新依赖
2. 修复已知问题
3. 优化代码结构
4. 更新文档
